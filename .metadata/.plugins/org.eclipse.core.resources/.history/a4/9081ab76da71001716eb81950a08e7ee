package BinaryTree;

import java.util.Scanner;

public class BinaryTree {
	private class Node {
		int data;
		Node left;
		Node right;
	}

	Node root;
	int size;

	public BinaryTree() {
		Scanner scn = new Scanner(System.in);
		root = takeinput(null, false, scn);
	}

	public Node takeinput(Node parent, boolean ilc, Scanner scn) {
		if (parent == null) {
			System.out.println("enter root data?");
		} else {
			if (ilc) {
				System.out.println("enter " + parent.data + " lefts child");
			} else {
				System.out.println("enter " + parent.data + " right child");
			}
		}

		int data = scn.nextInt();

		Node child = new Node();
		child.data = data;
		this.size++;

		// left
		System.out.println("does " + child.data + " has a left child");
		boolean hlc = scn.nextBoolean();
		if (hlc) {
			child.left = takeinput(child, true, scn);
		}

		// right
		System.out.println("does " + child.data + " has a right child");
		boolean hrc = scn.nextBoolean();
		if (hrc) {
			child.right = takeinput(child, false, scn);
		}

		return child;
	}

	public void display() {
		display(root);
	}

	private void display(Node node) {
		if (node == null) {
			return;
		}

		String str = "";
		if (node.left != null) {
			str += node.left.data + "";
		} else {
			str += ".";
		}

		str += "=>" + node.data + "<=";

		if (node.right != null) {
			str += node.right.data + "";
		} else {
			str += ".";
		}

		System.out.println(str);
		display(node.left);
		display(node.right);
	}

	public int size() {
		return this.size;
	}

	public boolean isempty() {
		return this.size == 0;
	}

	public int size2(){
		return size2(root);
	}
	
	private int size2(Node node){
		if(node == null){
			return 0;
		}
		
		int left = size2(node.left);
		int right = size2(node.right);
		
		return left + right + 1;
	}
	
	public int height(){
		return height(root) - 1;
	}
	
	private int height(Node node){
		int h = -1;
		
		int left = 0,right = 0;
		if(node.left!=null){
		   left = height(node.left);
		}
		
		if(node.right!=null){
		   right = height(node.right);
		}
		
		if(left>right){
			h = left;
		}else{
			h = right;
		}
		
		return h + 1;
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
}

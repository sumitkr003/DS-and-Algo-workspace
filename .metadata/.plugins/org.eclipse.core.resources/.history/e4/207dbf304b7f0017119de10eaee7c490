package Graph;

import java.lang.reflect.Array;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedList;

public class Graph {
	private class vertex{
		HashMap<String, Integer> neighbours = new HashMap<>();
	}
	
	private HashMap<String,vertex> vces = new HashMap<>();
	
	public int nymvertices(){
		return vces.size();
	}
	
	public boolean containsvertex(String vname){
		return vces.containsKey(vname);
	}
	
	public void addvertex(String vname){
		if(vces.containsKey(vname)){
			return;
		}
		vertex vtx = new vertex();
		
		
		vces.put(vname,vtx);
	}
	
	public int numedges(){
		int rv = 0;
		
		ArrayList<String> vtx = new ArrayList<>(vces.keySet());
		
		for(String val:vtx){
			vertex n = vces.get(val);
			rv += n.neighbours.size();
		}
		
		return rv/2;
	}
	
	public boolean containsedge(String vname1,String vname2){
		vertex vtx1 = vces.get(vname1);
		vertex vtx2 = vces.get(vname2);
		
		if(vtx1 == null || vtx2 == null || vtx1.neighbours.containsKey(vname2) == false){
			return false;
		}
		
		return true;
	}
	
	public void addedge(String vname1,String vname2,int weight){
		vertex vtx1 = vces.get(vname1);
		vertex vtx2 = vces.get(vname2);
		
		if(vtx1 == null || vtx2 == null){
			return;
		}
		
		vtx1.neighbours.put(vname2, weight);
		vtx2.neighbours.put(vname1, weight);
		
	}
	
	public void removeedge(String vname1,String vname2){
		vertex vtx1 = vces.get(vname1);
		vertex vtx2 = vces.get(vname2);
		
		if(vtx1 == null || vtx2 == null || vtx1.neighbours.containsKey(vname2) == false){
			return;
		}
		
		vtx1.neighbours.remove(vname2);
		vtx2.neighbours.remove(vname1);
	}
	
	public void display(){
        ArrayList<String> vtx = new ArrayList<>(vces.keySet());
		
		for(String val:vtx){
			vertex n = vces.get(val);
			ArrayList<String> nebrs = new ArrayList<>(n.neighbours.keySet());
			
			String ans = val + "=>";
			
			for(String val2:nebrs){
				ans+=val2;
				ans+="[" + n.neighbours.get(val2) + "] ";
			}
			
			System.out.println(ans);
		}
	}
	
	
	public void removevertex(String vname){
	     vertex vtx = vces.get(vname);
	     
	     ArrayList<String> nebrs = new ArrayList<>(vtx.neighbours.keySet());
	     
	     for(String nebrsname:nebrs){
	    	 vertex vtx2 = vces.get(nebrsname);
	    	 vtx2.neighbours.remove(vname);
	     }
	     
	     vces.remove(vname);
	}
	
	public boolean haspath(String vname1,String vname2){
		HashMap<String, Boolean> hp = new HashMap<>();
		return Haspath(vname1, vname2,hp);
	}
	
	private boolean Haspath(String vname1,String vname2,HashMap<String,Boolean> hp){
		if(hp.containsKey(vname1)){
			return false;
		}
		hp.put(vname1,true);
		
		if(this.containsedge(vname1, vname2)){
			return true;
		}
		vertex vtx = vces.get(vname1);
		
		ArrayList<String> al = new ArrayList<>(vtx.neighbours.keySet());
		for(String val:al){
			if(Haspath(val,vname2,hp)){
				return true;
			}
		}
		return false;
	}
	
	public void printallpath(String vname1,String vname2){
		HashMap<String, Boolean> hp = new HashMap<>();
		printallpath(vname1, vname2,hp,vname1);
	}
	
	public void printallpath(String vname1,String vname2,HashMap<String,Boolean> hp,String ans){
		if(hp.containsKey(vname1)){
			return;
		}
		hp.put(vname1,true);
		
		if(this.containsedge(vname1, vname2)){
			ans+=vname2;
			System.out.print(ans+vname2);
			
		}
		vertex vtx = vces.get(vname1);
		
		ArrayList<String> al = new ArrayList<>(vtx.neighbours.keySet());
		for(String val:al){
			printallpath(val,vname2,hp,ans+val);
			hp.put(val, false);
		}
		
		return;
	}
	
	public boolean bfs(String vname1,String vname2){
		LinkedList<pair> queue = new LinkedList<>();
		HashMap<String, Boolean> hp = new HashMap<>();
		
		pair pair = new pair(vces.get(vname1),vname1,vname1);
		queue.add(pair);
		hp.put(vname1, true);
		
		while(queue.isEmpty()){
			pair p = queue.removeFirst();
			
			if(this.containsedge(p.vname, vname2)){
				System.out.println(p.psf);
				return true;
			}
			
			ArrayList<String> al = new ArrayList<>(p.vtx.neighbours.keySet());
			for(String val:al){
				if(!hp.containsKey(val)){
					pair q = new pair(vces.get(val),val,p.psf+val);
					queue.addLast(q);
				}
			}
		}
		return false;
	}
	
	public class pair{
		vertex vtx;
		String vname;
		String psf;
		
		public pair(vertex a,String b,String c){
			this.vtx = a;
			this.vname = b;
			this.psf = c;
		}
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
}

package july18;

public class LinkedList {

	private class Node {
		int data;
		Node next;
	}

	Node head;
	Node tail;
	int size;

	public void handleat0(int value) {
		Node node = new Node();
		node.data = value;
		node.next = null;

		this.head = node;
		this.tail = node;
		this.size++;
	}

	public void addlast(int value) {
		if (this.size == 0) {
			this.handleat0(value);
		} else {
			Node node = new Node();
			node.data = value;
			node.next = null;

			this.tail.next = node;
			this.tail = node;
			this.size++;
		}
	}

	public int size() {
		return this.size;
	}

	public boolean isempty() {
		return this.size == 0;
	}

	public void display() {
		Node temp = this.head;

		System.out.println("---------------------------------------------------------------------------");

		while (temp != null) {
			System.out.print(temp.data + " ");
			temp = temp.next;
		}

		System.out.println();
		System.out.println("---------------------------------------------------------------------------");
	}

	public void addfirst(int value) {
		if (this.size == 0) {
			this.handleat0(value);
		} else {
			Node node = new Node();
			node.data = value;
			node.next = this.head;

			this.head = node;
			this.size++;
		}
	}

	public void addatindex(int value, int idx) throws Exception {
		if (this.size == 0) {
			this.handleat0(value);
		} else if (idx < 0 || idx > this.size) {
			throw new Exception("out of bound");
		} else if (idx == this.size) {
			this.addlast(value);
		} else {
			Node temp = new Node();
			temp.data = value;

			Node prev = nodeatindex(idx - 1);
			Node nex = nodeatindex(idx);

			temp.next = nex;
			prev.next = temp;
			this.size++;
		}

	}

	public int getfirst() throws Exception {
		if (this.size == 0) {
			throw new Exception("Linked List is Empty");
		} else {
			return this.head.data;
		}
	}

	public int getlast() throws Exception {
		if (this.size == 0) {
			throw new Exception("Linked List is Empty");
		} else {
			return this.tail.data;
		}
	}

	public int getatindex(int idx) throws Exception {
		if (this.size == 0) {
			throw new Exception("LinkedList is empty");
		}
		if (idx < 0 || idx >= this.size) {
			throw new Exception("out of bound");
		} else {
			int sidx = 0;
			Node temp = this.head;
			while (sidx != idx) {
				temp = temp.next;
				sidx++;
			}

			return temp.data;
		}
	}

	public Node nodeatindex(int idx) throws Exception {
		if (idx < 0 || idx >= this.size) {
			throw new Exception("out of bound");
		} else {
			int sidx = 0;
			Node temp = this.head;
			while (sidx != idx) {
				temp = temp.next;
				sidx++;
			}

			return temp;
		}
	}

	public int handleremove1() {
		int rv = this.head.data;

		this.head = null;
		this.tail = null;
		this.size = 0;

		return rv;
	}

	public int removefirst() throws Exception {
		int rv = 0;
		if (this.size == 0) {
			throw new Exception("Linked List is Empty");
		}
		if (this.size == 1) {
			this.handleremove1();
		} else {
			rv = this.head.data;
			this.head = this.head.next;
			this.size--;
		}
		return rv;
	}

	public int removelast() throws Exception {
		int rv = 0;
		if (this.size == 0) {
			throw new Exception("Linked List is Empty");
		} else if (this.size == 1) {
			this.handleremove1();
		} else {
			rv = this.tail.data;
			this.tail = nodeatindex(size - 2);
			this.tail.next = null;
			this.size--;
		}
		return rv;
	}

	public int removeat(int idx) throws Exception {
		if (size == 0) {
			throw new Exception("Linked List is Empty");
		}
		if (idx < 0 || idx > this.size - 1) {
			throw new Exception("out of bound");
		} else {
			if (idx == 0) {
				return removefirst();
			} else if (idx == this.size - 1) {
				return removelast();
			} else {
				Node m1 = nodeatindex(idx - 1);
				int rv = m1.next.data;
				Node p1 = nodeatindex(idx + 1);

				m1.next = p1;
				this.size--;
				return rv;
			}
		}
	}

	public void reversedataiterative() throws Exception{
		int sidx = 0, lidx = size - 1;
		while (sidx <= lidx) {
			Node start = nodeatindex(sidx);
			Node end  =  nodeatindex(lidx);
			
			int temp = start.data;
			start.data = end.data;
			end.data = temp;
			
			sidx++;
			lidx--;
		}

	}

	public void reversepointeriterative() throws Exception {

		Node prev = this.head;
		Node curr = this.head.next;
		while (curr != null) {
			Node temp = prev;
			prev = curr;
			curr = curr.next;
			prev.next = temp;
		}
		this.tail = this.head.next;
		this.head.next = null;
		this.head = prev;

	}
	
	public void reversepointerrecursive(){
		this.reversepointerrecursive(this.head,this.head.next);
	}
	
	private void reversepointerrecursive(Node prev,Node curr){
		if(curr==null){
			Node temp = this.head;
			this.head = prev;
			this.tail = temp;
			this.tail.next = null;
			return;
		}
		Node temp = curr.next;
		curr.next = prev;
		reversepointerrecursive(curr,temp);
		
		
	}

	public void displayreverse(){
		this.displayreverse(this.head);
	}
	
	private void displayreverse(Node start){
		if(start == null){
			return;
		}
		int data = start.data;
		displayreverse(start.next);
		System.out.print(data+" ");
	}
	
	private class HeapMover{
		Node node;
	}
	public void datarecursive(){
		HeapMover left = new HeapMover();
		this.datarecursive(left,this.head,0);
	}
	
    private void datarecursive(HeapMover left,Node right,int floor){
    	if(left == null){
			return;
		}
		int data = right.data;
		datarecursive(left,right.next,floor+1);
		
		if (floor>=this.size/2){
		int temp = data;
		left.node.data = data;
		left.node = left.node.next;
		}
		
    }
	
}
